"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const Index_1 = __importDefault(require("../controllers/Index"));
const Ingredientes_1 = __importDefault(require("../controllers/Ingredientes"));
const Recetas_1 = __importDefault(require("../controllers/Recetas"));
const Proveedores_1 = __importDefault(require("../controllers/Proveedores"));
const Packaging_1 = __importDefault(require("../controllers/Packaging"));
const ListPackagings_1 = require("../../application/usecases/packagings/ListPackagings");
const SqlPackagingRepository_1 = require("../../infrastructure/repositories/SqlPackagingRepository");
const routes = express_1.default.Router();
let namespace = '/api';
routes.get(namespace, Index_1.default.index);
let namespaceIngredientes = namespace + '/ingredientes';
routes.get(namespaceIngredientes, Ingredientes_1.default.getAll);
routes.get(namespaceIngredientes + '/:id', Ingredientes_1.default.getById);
routes.post(namespaceIngredientes, Ingredientes_1.default.create);
routes.put(namespaceIngredientes + '/:id', Ingredientes_1.default.update);
routes.delete(namespaceIngredientes + '/:id', Ingredientes_1.default.delete);
let namespaceRecetas = namespace + '/recetas';
routes.get(namespaceRecetas, Recetas_1.default.getAll);
routes.get(namespaceRecetas + '/:id', Recetas_1.default.getById);
routes.post(namespaceRecetas, Recetas_1.default.create);
routes.put(namespaceRecetas + '/:id', Recetas_1.default.update);
routes.delete(namespaceRecetas + '/:id', Recetas_1.default.delete);
let namespaceProveedores = namespace + '/proveedores';
routes.get(namespaceProveedores, Proveedores_1.default.getAll);
routes.get(namespaceProveedores + '/:id', Proveedores_1.default.getById);
routes.post(namespaceProveedores, Proveedores_1.default.create);
routes.put(namespaceProveedores + '/:id', Proveedores_1.default.update);
routes.delete(namespaceProveedores + '/:id', Proveedores_1.default.delete);
let namespacePackaging = namespace + '/packaging';
const packagingRepository = new SqlPackagingRepository_1.MySQLPackagingRepository();
const listPackagings = new ListPackagings_1.ListPackagings(packagingRepository);
const packagingController = new Packaging_1.default(listPackagings);
routes.get(namespacePackaging, packagingController.getAll.bind(packagingController));
routes.get(namespacePackaging + '/:id', packagingController.getById.bind(packagingController));
routes.post(namespacePackaging, packagingController.create);
routes.put(namespacePackaging + '/:id', packagingController.update);
routes.delete(namespacePackaging + '/:id', packagingController.delete);
exports.default = routes;
